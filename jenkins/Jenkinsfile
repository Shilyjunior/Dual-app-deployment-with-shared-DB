pipeline {
    agent any
    
    parameters {
        choice(
            name: 'APP_TYPE', 
            choices: ['both', 'flask', 'node'], 
            description: 'Select application to deploy'
        )
        string(
            name: 'FLASK_VERSION', 
            defaultValue: '1.0.0', 
            description: 'Flask app version'
        )
        string(
            name: 'NODE_VERSION', 
            defaultValue: '1.0.0', 
            description: 'Node.js app version'
        )
        booleanParam(
            name: 'DRY_RUN', 
            defaultValue: false, 
            description: 'Check mode (dry run) without making changes'
        )
    }
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'false'
    }
    
    stages {
        stage('Explore Repository') {
            steps {
                script {
                    echo "üîç Exploring repository structure..."
                    sh '''
                        echo "=== Detailed Structure ==="
                        echo "Ansible directory:"
                        ls -la ansible/
                        echo ""
                        echo "Apps directory:"
                        ls -la apps/
                        echo ""
                        echo "DB directory:"
                        ls -la db/
                        echo ""
                        echo "Scripts directory:"
                        ls -la scripts/
                        
                        echo ""
                        echo "=== Ansible Files ==="
                        find ansible/ -type f -name "*.yml" -o -name "*.yaml" -o -name "*.ini" | sort
                        
                        echo ""
                        echo "=== Application Files ==="
                        find apps/ -type f -name "*.py" -o -name "*.js" -o -name "*.html" -o -name "*.json" | sort
                        
                        echo ""
                        echo "=== Database Files ==="
                        find db/ -type f -name "*.sql" | sort
                    '''
                }
            }
        }
        
        stage('Validate Configuration') {
            steps {
                script {
                    echo "‚úÖ Validating configuration files..."
                    
                    // Check critical files
                    def criticalFiles = [
                        'ansible/deploy-apps.yml': 'Main Ansible playbook',
                        'ansible/inventory/host.ini': 'Ansible inventory',
                        'apps/flask-app/app.py': 'Flask application',
                        'apps/node-app/index.js': 'Node.js application',
                        'db/init.sql': 'Database initialization'
                    ]
                    
                    criticalFiles.each { file, description ->
                        if (fileExists(file)) {
                            echo "‚úÖ FOUND: ${description} (${file})"
                            // Show file content preview
                            sh "echo '--- ${file} preview ---' && head -5 ${file} 2>/dev/null || echo 'Cannot preview'"
                        } else {
                            echo "‚ùå MISSING: ${description} (${file})"
                        }
                    }
                }
            }
        }
        
        stage('Build Artifacts') {
            steps {
                script {
                    echo "üèóÔ∏è Building deployment artifacts..."
                    sh 'mkdir -p artifacts'
                    
                    // Build Flask artifact
                    if (params.APP_TYPE == 'flask' || params.APP_TYPE == 'both') {
                        sh """
                            if [ -d "apps/flask-app" ]; then
                                echo "Building Flask app v${params.FLASK_VERSION}"
                                tar -czf artifacts/flask-app-${params.FLASK_VERSION}.tar.gz -C apps/flask-app .
                                echo "‚úÖ Flask artifact created"
                                echo "Contents:"
                                tar -tzf artifacts/flask-app-${params.FLASK_VERSION}.tar.gz | head -10
                            else
                                echo "‚ùå Flask app directory not found"
                                find apps/ -type d -name "*flask*" | head -5
                            fi
                        """
                    }
                    
                    // Build Node.js artifact
                    if (params.APP_TYPE == 'node' || params.APP_TYPE == 'both') {
                        sh """
                            if [ -d "apps/node-app" ]; then
                                echo "Building Node.js app v${params.NODE_VERSION}"
                                tar -czf artifacts/node-app-${params.NODE_VERSION}.tar.gz -C apps/node-app .
                                echo "‚úÖ Node.js artifact created"
                                echo "Contents:"
                                tar -tzf artifacts/node-app-${params.NODE_VERSION}.tar.gz | head -10
                            else
                                echo "‚ùå Node.js app directory not found"
                                find apps/ -type d -name "*node*" | head -5
                            fi
                        """
                    }
                }
            }
        }
        
        stage('Test Ansible Connection') {
            steps {
                script {
                    echo "üîå Testing Ansible connectivity..."
                    
                    if (fileExists('ansible/inventory/host.ini')) {
                        sh '''
                            echo "=== Inventory File ==="
                            cat ansible/inventory/host.ini
                            
                            echo ""
                            echo "=== Testing Ansible Ping ==="
                            cd ansible
                            if ansible -i inventory/host.ini all -m ping; then
                                echo "‚úÖ Ansible connectivity test PASSED"
                            else
                                echo "‚ùå Ansible connectivity test FAILED"
                                echo "This is normal if target server is not configured yet"
                            fi
                        '''
                    } else {
                        echo "‚ö†Ô∏è No inventory file found - skipping Ansible test"
                    }
                }
            }
        }
        
        stage('Deploy Applications') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    echo "üöÄ Deploying applications..."
                    
                    if (fileExists('ansible/deploy-apps.yml') && fileExists('ansible/inventory/host.ini')) {
                        sh """
                            cd ansible
                            echo "=== Starting Ansible Deployment ==="
                            ansible-playbook -i inventory/host.ini deploy-apps.yml \
                                --extra-vars "flask_version=${params.FLASK_VERSION} node_version=${params.NODE_VERSION} deployment_type=${params.APP_TYPE}" \
                                --verbose
                            echo "‚úÖ Ansible deployment completed"
                        """
                    } else {
                        echo "‚ö†Ô∏è Ansible playbook or inventory missing - deploying manually"
                        
                        // Provide manual deployment instructions
                        sh '''
                            echo "=== MANUAL DEPLOYMENT INSTRUCTIONS ==="
                            echo "1. Ensure target server is accessible via SSH"
                            echo "2. Install required packages:"
                            echo "   sudo yum install -y postgresql-server python3 nodejs"
                            echo "3. Set up database using: db/init.sql"
                            echo "4. Deploy Flask app to port 5000"
                            echo "5. Deploy Node.js app to port 3000"
                        '''
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    echo "üîç Verifying deployment..."
                    
                    // Extract target IP from inventory
                    def targetIP = sh(
                        script: '''
                            grep -oE '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' ansible/inventory/host.ini | head -1 || echo "127.0.0.1"
                        ''',
                        returnStdout: true
                    ).trim()
                    
                    echo "Target server IP: ${targetIP}"
                    
                    // Test Flask app
                    if (params.APP_TYPE == 'flask' || params.APP_TYPE == 'both') {
                        sh """
                            echo "Testing Flask app on ${targetIP}:5000..."
                            for i in {1..5}; do
                                if curl -f -s --connect-timeout 10 http://${targetIP}:5000; then
                                    echo "‚úÖ Flask app is RUNNING"
                                    break
                                else
                                    echo "‚è≥ Attempt \$i: Flask app not ready..."
                                    sleep 10
                                fi
                            done
                        """
                    }
                    
                    // Test Node.js app
                    if (params.APP_TYPE == 'node' || params.APP_TYPE == 'both') {
                        sh """
                            echo "Testing Node.js app on ${targetIP}:3000..."
                            for i in {1..5}; do
                                if curl -f -s --connect-timeout 10 http://${targetIP}:3000; then
                                    echo "‚úÖ Node.js app is RUNNING"
                                    break
                                else
                                    echo "‚è≥ Attempt \$i: Node.js app not ready..."
                                    sleep 10
                                fi
                            done
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "üèÅ Pipeline execution completed"
            script {
                // Archive artifacts
                if (fileExists('artifacts')) {
                    archiveArtifacts artifacts: 'artifacts/*.tar.gz', fingerprint: true
                }
                
                // Create deployment report
                sh """
                    echo "=== DEPLOYMENT REPORT ===" > report.txt
                    echo "Timestamp: \$(date)" >> report.txt
                    echo "Status: ${currentBuild.result ?: 'SUCCESS'}" >> report.txt
                    echo "Applications: ${params.APP_TYPE}" >> report.txt
                    echo "Flask Version: ${params.FLASK_VERSION}" >> report.txt
                    echo "Node Version: ${params.NODE_VERSION}" >> report.txt
                    echo "Dry Run: ${params.DRY_RUN}" >> report.txt
                    echo "" >> report.txt
                    echo "=== Repository Structure ===" >> report.txt
                    find . -type f -name "*.py" -o -name "*.js" -o -name "*.sql" -o -name "*.yml" -o -name "*.yaml" | sort >> report.txt
                """
                archiveArtifacts artifacts: 'report.txt', fingerprint: true
                
                // Show final structure
                sh '''
                    echo "=== Final Workspace Structure ==="
                    find . -type f | grep -v .git | sort
                '''
            }
        }
        
        success {
            echo "üéâ Pipeline executed successfully!"
            
            script {
                if (params.DRY_RUN) {
                    echo "üìã Dry run completed - ready for actual deployment"
                } else {
                    echo "‚úÖ Applications deployed successfully!"
                    
                    // Get target IP for success message
                    def targetIP = sh(
                        script: '''
                            grep -oE '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' ansible/inventory/host.ini | head -1 || echo "TARGET_SERVER"
                        ''',
                        returnStdout: true
                    ).trim()
                    
                    echo "Access your applications at:"
                    if (params.APP_TYPE == 'flask' || params.APP_TYPE == 'both') {
                        echo "Flask App: http://${targetIP}:5000"
                    }
                    if (params.APP_TYPE == 'node' || params.APP_TYPE == 'both') {
                        echo "Node.js App: http://${targetIP}:3000"
                    }
                }
            }
        }
        
        failure {
            echo "‚ùå Pipeline execution failed"
            sh '''
                echo "=== TROUBLESHOOTING TIPS ==="
                echo "1. Check if all required files exist in the repository"
                echo "2. Verify Ansible inventory file configuration"
                echo "3. Ensure target server is accessible via SSH"
                echo "4. Check application logs on the target server"
                echo "5. Review the console output above for specific errors"
            '''
        }
    }
}