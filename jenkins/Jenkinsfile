pipeline {
    agent {
        label 'Jenkins agent'
    }
    
    parameters {
        choice(name: 'APP_TYPE', choices: ['both', 'flask', 'node'], description: 'Select application to deploy')
        string(name: 'FLASK_VERSION', defaultValue: '1.0.0', description: 'Flask app version')
        string(name: 'NODE_VERSION', defaultValue: '1.0.0', description: 'Node.js app version')
        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Check mode (dry run) without making changes')
    }
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'false'
        WORKSPACE_DIR = "/home/ubuntu/jenkins-workspace"  // Use accessible directory
    }
    
    stages {
        stage('Verify Agent Environment') {
            steps {
                script {
                    echo "üîç Checking agent environment..."
                    sh '''
                        echo "=== Running on: ==="
                        cat /etc/os-release
                        echo ""
                        echo "=== Ansible Version ==="
                        ansible --version || echo "Ansible not installed"
                        echo ""
                        echo "=== Python Version ==="
                        python3 --version || echo "Python3 not installed"
                        echo ""
                        echo "=== Current Directory ==="
                        pwd
                        ls -la
                        echo ""
                        echo "=== Disk Space ==="
                        df -h
                    '''
                }
            }
        }
        
        stage('Checkout and Explore Repository') {
            steps {
                script {
                    echo "üì• Checking out repository..."
                    checkout scm
                    
                    echo "üîç Exploring repository structure..."
                    sh '''
                        echo "=== Repository Contents ==="
                        ls -la
                        echo ""
                        echo "=== Ansible directory ==="
                        ls -la ansible/ 2>/dev/null || echo "No ansible directory found"
                        echo ""
                        echo "=== Apps directory ==="
                        ls -la apps/ 2>/dev/null || echo "No apps directory found"
                    '''
                }
            }
        }
        
        stage('Validate Configuration') {
            steps {
                script {
                    echo "‚úÖ Validating configuration files..."
                    
                    sh '''
                        echo "=== Critical Files Check ==="
                        [ -f "ansible/deploy-apps.yml" ] && echo "‚úÖ Main playbook exists" || echo "‚ùå Main playbook missing"
                        [ -f "ansible/inventory/host.ini" ] && echo "‚úÖ Inventory exists" || echo "‚ùå Inventory missing"
                        [ -d "apps/flask-app" ] && echo "‚úÖ Flask app directory exists" || echo "‚ùå Flask app directory missing"
                        [ -d "apps/node-app" ] && echo "‚úÖ Node.js app directory exists" || echo "‚ùå Node.js app directory missing"
                        [ -f "db/init.sql" ] && echo "‚úÖ DB init exists" || echo "‚ùå DB init missing"
                        
                        echo ""
                        echo "=== Inventory Content ==="
                        cat ansible/inventory/host.ini 2>/dev/null || echo "Inventory file not accessible"
                    '''
                }
            }
        }
        
        stage('Install Required Tools') {
            when {
                expression { 
                    sh(script: 'which ansible', returnStatus: true) != 0 
                }
            }
            steps {
                script {
                    echo "üì¶ Installing required tools..."
                    sh '''
                        echo "Installing Ansible and dependencies..."
                        sudo apt update
                        sudo apt install -y ansible python3-pip sshpass
                        echo "‚úÖ Tools installed"
                    '''
                }
            }
        }
        
        stage('Test Ansible Connectivity') {
            steps {
                script {
                    echo "üîå Testing Ansible connectivity to target server..."
                    
                    sh '''
                        cd ansible
                        echo "=== Testing Ansible Ping ==="
                        ansible -i inventory/host.ini all -m ping -vvv
                        
                        if [ $? -eq 0 ]; then
                            echo "‚úÖ Ansible connectivity SUCCESS"
                        else
                            echo "‚ùå Ansible connectivity FAILED"
                            echo "=== Attempting manual SSH test ==="
                            TARGET_IP=$(grep -oE "([0-9]{1,3}\\.){3}[0-9]{1,3}" inventory/host.ini | head -1)
                            ssh-keyscan -H $TARGET_IP >> ~/.ssh/known_hosts
                            ssh -o ConnectTimeout=10 ubuntu@$TARGET_IP "echo 'SSH connection successful'"
                        fi
                    '''
                }
            }
        }
        
        stage('Build Artifacts') {
            steps {
                script {
                    echo "üèóÔ∏è Building deployment artifacts..."
                    sh 'mkdir -p artifacts'
                    
                    if (params.APP_TYPE == 'flask' || params.APP_TYPE == 'both') {
                        sh """
                            echo "Building Flask app v${params.FLASK_VERSION}"
                            [ -d "apps/flask-app" ] && tar -czf artifacts/flask-app-${params.FLASK_VERSION}.tar.gz -C apps/flask-app . || echo "Flask app directory not found"
                            echo "‚úÖ Flask artifact creation attempted"
                        """
                    }
                    
                    if (params.APP_TYPE == 'node' || params.APP_TYPE == 'both') {
                        sh """
                            echo "Building Node.js app v${params.NODE_VERSION}"
                            [ -d "apps/node-app" ] && tar -czf artifacts/node-app-${params.NODE_VERSION}.tar.gz -C apps/node-app . || echo "Node.js app directory not found"
                            echo "‚úÖ Node.js artifact creation attempted"
                        """
                    }
                    
                    sh 'ls -la artifacts/ 2>/dev/null || echo "No artifacts directory"'
                }
            }
        }
        
        stage('Deploy Applications') {
            when {
                expression { 
                    !params.DRY_RUN && 
                    fileExists('ansible/deploy-apps.yml') &&
                    fileExists('ansible/inventory/host.ini')
                }
            }
            steps {
                script {
                    echo "üöÄ Deploying applications..."
                    
                    // Copy init.sql to temp location for Ansible
                    sh '''
                        mkdir -p /tmp/deployment
                        [ -f "db/init.sql" ] && cp db/init.sql /tmp/init.sql || echo "No init.sql found, using existing"
                    '''
                    
                    sh """
                        cd ansible
                        echo "=== Starting Ansible Deployment ==="
                        echo "Flask Version: ${params.FLASK_VERSION}"
                        echo "Node Version: ${params.NODE_VERSION}" 
                        echo "App Type: ${params.APP_TYPE}"
                        
                        ansible-playbook -i inventory/host.ini deploy-apps.yml \
                            --extra-vars "flask_version=${params.FLASK_VERSION} node_version=${params.NODE_VERSION} deployment_type=${params.APP_TYPE}" \
                            --verbose
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    echo "üîç Verifying deployment..."
                    
                    // Extract target IP from inventory
                    def targetIP = sh(
                        script: 'cd ansible && grep -oE "([0-9]{1,3}\\.){3}[0-9]{1,3}" inventory/host.ini | head -1',
                        returnStdout: true
                    ).trim()
                    
                    echo "Target server IP: ${targetIP}"
                    
                    if (targetIP) {
                        // Test Flask app
                        if (params.APP_TYPE == 'flask' || params.APP_TYPE == 'both') {
                            sh """
                                echo "Testing Flask app on ${targetIP}:5000..."
                                for i in {1..5}; do
                                    if curl -f -s --connect-timeout 5 http://${targetIP}:5000 > /dev/null; then
                                        echo "‚úÖ Flask app is RUNNING"
                                        echo "Response preview:"
                                        curl -s http://${targetIP}:5000 | head -3
                                        break
                                    else
                                        echo "‚è≥ Attempt \$i: Flask app not ready..."
                                        sleep 5
                                    fi
                                done
                            """
                        }
                        
                        // Test Node.js app
                        if (params.APP_TYPE == 'node' || params.APP_TYPE == 'both') {
                            sh """
                                echo "Testing Node.js app on ${targetIP}:3000..."
                                for i in {1..5}; do
                                    if curl -f -s --connect-timeout 5 http://${targetIP}:3000 > /dev/null; then
                                        echo "‚úÖ Node.js app is RUNNING"
                                        echo "Response preview:"
                                        curl -s http://${targetIP}:3000 | head -3
                                        break
                                    else
                                        echo "‚è≥ Attempt \$i: Node.js app not ready..."
                                        sleep 5
                                    fi
                                done
                            """
                        }
                    } else {
                        echo "‚ùå Could not determine target IP from inventory"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üèÅ Pipeline execution completed"
                
                // Create report
                sh """
                    echo "=== DEPLOYMENT REPORT ===" > report.txt
                    echo "Timestamp: \$(date)" >> report.txt
                    echo "Status: ${currentBuild.result ?: 'SUCCESS'}" >> report.txt
                    echo "Agent: \$(hostname)" >> report.txt
                    echo "Workspace: \$(pwd)" >> report.txt
                    echo "Applications: ${params.APP_TYPE}" >> report.txt
                    echo "Flask Version: ${params.FLASK_VERSION}" >> report.txt
                    echo "Node Version: ${params.NODE_VERSION}" >> report.txt
                    echo "" >> report.txt
                    echo "=== FILES ===" >> report.txt
                    ls -la >> report.txt
                """
                
                // Archive artifacts if they exist
                sh '''
                    if [ -d "artifacts" ] && [ "$(ls -A artifacts)" ]; then
                        archiveArtifacts artifacts: 'artifacts/*.tar.gz', fingerprint: true
                    fi
                    archiveArtifacts artifacts: 'report.txt', fingerprint: true
                '''
            }
        }
        
        success {
            echo "üéâ Deployment completed successfully!"
        }
        
        failure {
            echo "‚ùå Deployment failed!"
            script {
                sh '''
                    echo "=== TROUBLESHOOTING STEPS ==="
                    echo "1. Check agent connectivity: Is 'Jenkins agent' online?"
                    echo "2. Verify repository structure: Are all required files present?"
                    echo "3. Check Ansible installation on agent"
                    echo "4. Verify SSH connectivity to target server (172.31.31.22)"
                    echo "5. Review Ansible playbook syntax and variables"
                    echo ""
                    echo "=== WORKSPACE CONTENTS ==="
                    ls -la
                    echo ""
                    echo "=== ANSIBLE DIRECTORY ==="
                    ls -la ansible/ 2>/dev/null || echo "No ansible directory"
                '''
            }
        }
        
        unstable {
            echo "‚ö†Ô∏è Deployment completed with warnings"
        }
    }
}