pipeline {
    agent {
        label 'master'  // or 'ubuntu-agent' if you have specific agent
    }
    
    parameters {
        choice(
            name: 'APP_TYPE', 
            choices: ['both', 'flask', 'node'], 
            description: 'Select application to deploy'
        )
        string(
            name: 'FLASK_VERSION', 
            defaultValue: '1.0.0', 
            description: 'Flask app version'
        )
        string(
            name: 'NODE_VERSION', 
            defaultValue: '1.0.0', 
            description: 'Node.js app version'
        )
        booleanParam(
            name: 'DRY_RUN', 
            defaultValue: false, 
            description: 'Check mode (dry run) without making changes'
        )
        booleanParam(
            name: 'CLEANUP_ARTIFACTS', 
            defaultValue: true, 
            description: 'Clean up old artifacts after deployment'
        )
    }
    
    environment {
        ANSIBLE_CONFIG = 'ansible/ansible.cfg'
        ANSIBLE_HOST_KEY_CHECKING = 'false'
        ARTIFACT_RETENTION_DAYS = '7'
        // These will be set dynamically
        TARGET_HOST = ''
        DEPLOYMENT_STATUS = 'UNKNOWN'
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "🚀 Starting deployment pipeline"
                    echo "Application Type: ${params.APP_TYPE}"
                    echo "Flask Version: ${params.FLASK_VERSION}"
                    echo "Node Version: ${params.NODE_VERSION}"
                    echo "Dry Run: ${params.DRY_RUN}"
                    
                    // Extract target host from inventory
                    TARGET_HOST = sh(
                        script: '''
                            grep -E '^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' ansible/inventory/host.ini | head -1 | awk '{print $1}'
                        ''', 
                        returnStdout: true
                    ).trim()
                    
                    if (!TARGET_HOST) {
                        error "❌ Could not extract target host from inventory file"
                    }
                    
                    echo "🎯 Target Host: ${TARGET_HOST}"
                }
            }
        }
        
        stage('Checkout SCM') {
            steps {
                checkout scm
                script {
                    echo "📦 Repository checked out successfully"
                    sh 'ls -la'
                }
            }
        }
        
        stage('Validate Environment') {
            steps {
                script {
                    echo "🔍 Validating environment and files..."
                    
                    // Check critical files exist
                    def requiredFiles = [
                        'ansible/inventory/host.ini',
                        'ansible/deploy-apps.yml',
                        'ansible/roles/postgresql-setup/tasks/main.yml',
                        'ansible/roles/flask-app-deploy/tasks/main.yml',
                        'ansible/roles/node-app-deploy/tasks/main.yml',
                        'apps/flask-app/app.py',
                        'apps/node-app/index.js',
                        'database/init.sql'
                    ]
                    
                    requiredFiles.each { file ->
                        if (!fileExists(file)) {
                            error "❌ Required file missing: ${file}"
                        }
                    }
                    
                    // Validate inventory file
                    sh '''
                        echo "Inventory file content:"
                        cat ansible/inventory/host.ini
                        echo ""
                    '''
                    
                    // Test SSH connectivity
                    sh """
                        echo "Testing SSH connection to ${TARGET_HOST}..."
                        ssh -o StrictHostKeyChecking=no -i /home/ec2-user/Linux_test_key.pem ec2-user@${TARGET_HOST} "echo '✅ SSH connection successful'"
                    """
                }
            }
        }
        
        stage('Build Artifacts') {
            parallel {
                stage('Build Flask Artifact') {
                    when {
                        anyOf {
                            expression { params.APP_TYPE == 'flask' }
                            expression { params.APP_TYPE == 'both' }
                        }
                    }
                    steps {
                        script {
                            echo "🏗️ Building Flask artifact v${params.FLASK_VERSION}"
                            sh """
                                chmod +x scripts/build-artifacts.sh
                                ./scripts/build-artifacts.sh ${params.FLASK_VERSION} flask
                            """
                            
                            // Verify artifact was created
                            sh """
                                ls -la apps/artifacts/flask-app/
                                tar -tzf apps/artifacts/flask-app/flask-app-${params.FLASK_VERSION}.tar.gz
                            """
                        }
                    }
                }
                
                stage('Build Node.js Artifact') {
                    when {
                        anyOf {
                            expression { params.APP_TYPE == 'node' }
                            expression { params.APP_TYPE == 'both' }
                        }
                    }
                    steps {
                        script {
                            echo "🏗️ Building Node.js artifact v${params.NODE_VERSION}"
                            sh """
                                chmod +x scripts/build-artifacts.sh
                                ./scripts/build-artifacts.sh ${params.NODE_VERSION} node
                            """
                            
                            // Verify artifact was created
                            sh """
                                ls -la apps/artifacts/node-app/
                                tar -tzf apps/artifacts/node-app/node-app-${params.NODE_VERSION}.tar.gz
                            """
                        }
                    }
                }
            }
            
            post {
                success {
                    echo "✅ Artifacts built successfully"
                }
                failure {
                    echo "❌ Artifact build failed"
                }
            }
        }
        
        stage('Pre-Deployment Check') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    echo "🔍 Running pre-deployment checks..."
                    
                    // Check if target server is reachable
                    sh """
                        ansible -i ansible/inventory/host.ini g1 -m ping
                    """
                    
                    // Check current services status
                    sh """
                        echo "Current status on target server:"
                        ssh -o StrictHostKeyChecking=no -i /home/ec2-user/Linux_test_key.pem ec2-user@${TARGET_HOST} "
                            echo '--- PostgreSQL Status ---'
                            sudo systemctl status postgresql --no-pager | head -3 || echo 'PostgreSQL not installed'
                            echo ''
                            echo '--- Flask App Status ---'
                            sudo systemctl status flask-app --no-pager | head -3 2>/dev/null || echo 'Flask app not running'
                            echo ''
                            echo '--- PM2 Status ---'
                            sudo -u devops pm2 status 2>/dev/null | head -5 || echo 'PM2 not running'
                        "
                    """
                }
            }
        }
        
        stage('Run Ansible Deployment') {
            steps {
                script {
                    echo "🚀 Starting Ansible deployment"
                    
                    def dryRunFlag = params.DRY_RUN ? '--check' : ''
                    def extraVars = [
                        "flask_version=${params.FLASK_VERSION}",
                        "node_version=${params.NODE_VERSION}", 
                        "deployment_type=${params.APP_TYPE}"
                    ]
                    
                    // Method 1: Using ansible-playbook command directly
                    sh """
                        cd ansible
                        set -x  # Debug mode
                        ansible-playbook -i inventory/host.ini deploy-apps.yml \
                            ${dryRunFlag} \
                            --extra-vars "${extraVars.collect { k, v -> \"${k}=${v}\" }.join(' ')}" \
                            --verbose
                    """
                    
                    // Alternative Method 2: Using Jenkins Ansible Plugin (if installed)
                    /*
                    ansiblePlaybook(
                        playbook: 'ansible/deploy-apps.yml',
                        inventory: 'ansible/inventory/host.ini',
                        extraVars: extraVars,
                        credentialsId: 'centos-ssh-key',
                        colorized: true,
                        disableHostKeyChecking: true,
                        become: true,
                        becomeUser: 'root'
                    )
                    */
                }
            }
            
            post {
                success {
                    script {
                        DEPLOYMENT_STATUS = 'SUCCESS'
                        echo "✅ Ansible deployment completed successfully"
                    }
                }
                failure {
                    script {
                        DEPLOYMENT_STATUS = 'FAILED'
                        echo "❌ Ansible deployment failed"
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            when {
                expression { !params.DRY_RUN && DEPLOYMENT_STATUS == 'SUCCESS' }
            }
            steps {
                script {
                    echo "🔍 Verifying deployment..."
                    
                    // Test Flask application
                    if (params.APP_TYPE == 'flask' || params.APP_TYPE == 'both') {
                        sh """
                            echo "Testing Flask app on ${TARGET_HOST}:5000..."
                            for i in {1..10}; do
                                if curl -f -s --connect-timeout 10 http://${TARGET_HOST}:5000 > /dev/null; then
                                    echo "✅ Flask app is responding successfully"
                                    echo "--- Flask app response preview ---"
                                    curl -s http://${TARGET_HOST}:5000 | head -10
                                    break
                                else
                                    echo "⏳ Attempt \$i: Flask app not ready yet, waiting..."
                                    sleep 10
                                fi
                                if [ \$i -eq 10 ]; then
                                    echo "❌ Flask app failed to start within timeout"
                                    exit 1
                                fi
                            done
                        """
                    }
                    
                    // Test Node.js application  
                    if (params.APP_TYPE == 'node' || params.APP_TYPE == 'both') {
                        sh """
                            echo "Testing Node.js app on ${TARGET_HOST}:3000..."
                            for i in {1..10}; do
                                if curl -f -s --connect-timeout 10 http://${TARGET_HOST}:3000 > /dev/null; then
                                    echo "✅ Node.js app is responding successfully"
                                    echo "--- Node.js app response preview ---"
                                    curl -s http://${TARGET_HOST}:3000 | head -10
                                    break
                                else
                                    echo "⏳ Attempt \$i: Node.js app not ready yet, waiting..."
                                    sleep 10
                                fi
                                if [ \$i -eq 10 ]; then
                                    echo "❌ Node.js app failed to start within timeout"
                                    exit 1
                                fi
                            done
                        """
                    }
                    
                    // Check service status on target server
                    sh """
                        echo "=== Final Service Status ==="
                        ssh -o StrictHostKeyChecking=no -i /home/ec2-user/Linux_test_key.pem ec2-user@${TARGET_HOST} "
                            echo '--- PostgreSQL ---'
                            sudo systemctl is-active postgresql && echo '✅ PostgreSQL: ACTIVE' || echo '❌ PostgreSQL: INACTIVE'
                            
                            echo '--- Flask App ---'
                            sudo systemctl is-active flask-app 2>/dev/null && echo '✅ Flask App: ACTIVE' || echo '❌ Flask App: INACTIVE'
                            
                            echo '--- Node.js App ---'
                            sudo -u devops pm2 describe node-shared-db-app >/dev/null 2>&1 && echo '✅ Node.js App: ACTIVE' || echo '❌ Node.js App: INACTIVE'
                        "
                    """
                }
            }
        }
        
        stage('Cleanup Artifacts') {
            when {
                expression { params.CLEANUP_ARTIFACTS && !params.DRY_RUN }
            }
            steps {
                script {
                    echo "🧹 Cleaning up old artifacts..."
                    sh """
                        chmod +x scripts/cleanup-artifacts.sh
                        ./scripts/cleanup-artifacts.sh ${env.ARTIFACT_RETENTION_DAYS}
                    """
                    
                    // Also clean Jenkins workspace
                    cleanWs(
                        deleteDirs: false,
                        patterns: [
                            [pattern: 'apps/artifacts/**', type: 'INCLUDE'],
                            [pattern: '.ansible/**', type: 'INCLUDE'],
                            [pattern: '**/*.retry', type: 'INCLUDE']
                        ]
                    )
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "🏁 Pipeline execution completed"
                echo "Deployment Status: ${DEPLOYMENT_STATUS}"
                echo "Target Host: ${TARGET_HOST}"
                echo "Application Type: ${params.APP_TYPE}"
                
                // Generate deployment report
                sh """
                    echo "=== Deployment Report ===" > deployment-report.txt
                    echo "Timestamp: \$(date)" >> deployment-report.txt
                    echo "Build: ${env.BUILD_URL}" >> deployment-report.txt
                    echo "Status: ${DEPLOYMENT_STATUS}" >> deployment-report.txt
                    echo "Target: ${TARGET_HOST}" >> deployment-report.txt
                    echo "Apps: ${params.APP_TYPE}" >> deployment-report.txt
                    echo "Flask Version: ${params.FLASK_VERSION}" >> deployment-report.txt
                    echo "Node Version: ${params.NODE_VERSION}" >> deployment-report.txt
                    echo "Dry Run: ${params.DRY_RUN}" >> deployment-report.txt
                    cat deployment-report.txt
                """
                
                archiveArtifacts artifacts: 'deployment-report.txt', fingerprint: true
            }
        }
        
        success {
            script {
                if (!params.DRY_RUN) {
                    echo "🎉 Deployment completed successfully!"
                    
                    // Send success notification
                    emailext (
                        subject: "✅ DEPLOYMENT SUCCESS: ${params.APP_TYPE} Apps v${params.FLASK_VERSION}/${params.NODE_VERSION}",
                        body: """
                        Deployment completed successfully!
                        
                        Details:
                        - Target Server: ${TARGET_HOST}
                        - Applications: ${params.APP_TYPE}
                        - Flask Version: ${params.FLASK_VERSION}
                        - Node.js Version: ${params.NODE_VERSION}
                        - Build URL: ${env.BUILD_URL}
                        - Timestamp: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                        
                        Services:
                        - Flask App: http://${TARGET_HOST}:5000
                        - Node.js App: http://${TARGET_HOST}:3000
                        
                        Verification commands:
                        curl http://${TARGET_HOST}:5000
                        curl http://${TARGET_HOST}:3000
                        """,
                        to: 'devops@yourcompany.com',
                        attachLog: true
                    )
                } else {
                    echo "✅ Dry run completed successfully - no changes were made"
                }
            }
        }
        
        failure {
            script {
                echo "💥 Deployment failed!"
                
                // Capture logs for debugging
                sh """
                    echo "=== Recent Error Logs ===" > error-logs.txt
                    ssh -o StrictHostKeyChecking=no -i /home/ec2-user/Linux_test_key.pem ec2-user@${TARGET_HOST} "
                        echo '--- Flask Service Logs ---' >> error-logs.txt
                        sudo journalctl -u flask-app --since '1 hour ago' --no-pager | tail -20 >> error-logs.txt
                        echo '' >> error-logs.txt
                        echo '--- PM2 Logs ---' >> error-logs.txt
                        sudo -u devops pm2 logs node-shared-db-app --lines 20 --nostream 2>/dev/null >> error-logs.txt || echo 'PM2 logs unavailable' >> error-logs.txt
                        echo '' >> error-logs.txt
                        echo '--- PostgreSQL Logs ---' >> error-logs.txt
                        sudo tail -20 /var/lib/pgsql/data/log/postgresql-*.log 2>/dev/null >> error-logs.txt || echo 'PostgreSQL logs unavailable' >> error-logs.txt
                    " >> error-logs.txt
                """
                
                archiveArtifacts artifacts: 'error-logs.txt', fingerprint: true
                
                // Send failure notification
                emailext (
                    subject: "❌ DEPLOYMENT FAILED: ${params.APP_TYPE} Apps",
                    body: """
                    Deployment failed! Please check the logs.
                    
                    Details:
                    - Target Server: ${TARGET_HOST}
                    - Applications: ${params.APP_TYPE}
                    - Build URL: ${env.BUILD_URL}
                    - Failed Stage: ${currentBuild.result}
                    
                    Check the Jenkins build for detailed error information.
                    """,
                    to: 'devops@yourcompany.com',
                    attachLog: true
                )
            }
        }
        
        unstable {
            echo "⚠️ Pipeline marked as unstable"
        }
        
        cleanup {
            echo "🧼 Cleaning up workspace..."
            // Additional cleanup if needed
        }
    }
}