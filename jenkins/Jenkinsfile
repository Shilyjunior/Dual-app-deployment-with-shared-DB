pipeline {
    agent {
        label 'Jenkins agent'  // ‚Üê CRITICAL: Run on agent with Ansible
    }
    
    parameters {
        choice(name: 'APP_TYPE', choices: ['both', 'flask', 'node'], description: 'Select application to deploy')
        string(name: 'FLASK_VERSION', defaultValue: '1.0.0', description: 'Flask app version')
        string(name: 'NODE_VERSION', defaultValue: '1.0.0', description: 'Node.js app version')
        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Check mode (dry run) without making changes')
    }
    
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'false'
    }
    
    stages {
        stage('Verify Agent Environment') {
            steps {
                script {
                    echo "üîç Checking agent environment..."
                    sh '''
                        echo "=== Running on: ==="
                        cat /etc/os-release
                        echo ""
                        echo "=== Ansible Version ==="
                        ansible --version
                        echo ""
                        echo "=== Python Version ==="
                        python3 --version
                        echo ""
                        echo "=== Current Directory ==="
                        pwd
                        ls -la
                    '''
                }
            }
        }
        
        stage('Explore Repository') {
            steps {
                script {
                    echo "üîç Exploring repository structure..."
                    sh '''
                        echo "=== Detailed Structure ==="
                        echo "Ansible directory:"
                        ls -la ansible/
                        echo ""
                        echo "=== Ansible Files ==="
                        find ansible/ -type f -name "*.yml" -o -name "*.yaml" -o -name "*.ini" | sort
                    '''
                }
            }
        }
        
        stage('Validate Configuration') {
            steps {
                script {
                    echo "‚úÖ Validating configuration files..."
                    
                    sh '''
                        echo "=== Critical Files Check ==="
                        [ -f "ansible/deploy-apps.yml" ] && echo "‚úÖ Main playbook exists" || echo "‚ùå Main playbook missing"
                        [ -f "ansible/inventory/host.ini" ] && echo "‚úÖ Inventory exists" || echo "‚ùå Inventory missing"
                        [ -f "apps/flask-app/app.py" ] && echo "‚úÖ Flask app exists" || echo "‚ùå Flask app missing"
                        [ -f "apps/node-app/index.js" ] && echo "‚úÖ Node.js app exists" || echo "‚ùå Node.js app missing"
                        [ -f "db/init.sql" ] && echo "‚úÖ DB init exists" || echo "‚ùå DB init missing"
                        
                        echo ""
                        echo "=== Inventory Content ==="
                        cat ansible/inventory/host.ini
                    '''
                }
            }
        }
        
        stage('Test Ansible Connectivity') {
            steps {
                script {
                    echo "üîå Testing Ansible connectivity to target server..."
                    
                    sh '''
                        cd ansible
                        echo "=== Testing Ansible Ping ==="
                        ansible -i inventory/host.ini all -m ping -vvv
                        
                        if [ $? -eq 0 ]; then
                            echo "‚úÖ Ansible connectivity SUCCESS"
                        else
                            echo "‚ùå Ansible connectivity FAILED"
                            echo "=== Troubleshooting ==="
                            echo "1. Check if target server (172.31.31.22) is running"
                            echo "2. Verify SSH key is accessible on agent"
                            echo "3. Check network connectivity between agent and target"
                        fi
                    '''
                }
            }
        }
        
        stage('Build Artifacts') {
            steps {
                script {
                    echo "üèóÔ∏è Building deployment artifacts..."
                    sh 'mkdir -p artifacts'
                    
                    if (params.APP_TYPE == 'flask' || params.APP_TYPE == 'both') {
                        sh """
                            echo "Building Flask app v${params.FLASK_VERSION}"
                            tar -czf artifacts/flask-app-${params.FLASK_VERSION}.tar.gz -C apps/flask-app .
                            echo "‚úÖ Flask artifact created"
                        """
                    }
                    
                    if (params.APP_TYPE == 'node' || params.APP_TYPE == 'both') {
                        sh """
                            echo "Building Node.js app v${params.NODE_VERSION}"
                            tar -czf artifacts/node-app-${params.NODE_VERSION}.tar.gz -C apps/node-app .
                            echo "‚úÖ Node.js artifact created"
                        """
                    }
                    
                    sh 'ls -la artifacts/'
                }
            }
        }
        
        stage('Deploy Applications') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    echo "üöÄ Deploying applications..."
                    
                    sh """
                        cd ansible
                        echo "=== Starting Ansible Deployment ==="
                        echo "Flask Version: ${params.FLASK_VERSION}"
                        echo "Node Version: ${params.NODE_VERSION}" 
                        echo "App Type: ${params.APP_TYPE}"
                        
                        ansible-playbook -i inventory/host.ini deploy-apps.yml \
                            --extra-vars "flask_version=${params.FLASK_VERSION} node_version=${params.NODE_VERSION} deployment_type=${params.APP_TYPE}" \
                            --verbose
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    echo "üîç Verifying deployment..."
                    
                    // Extract target IP from inventory
                    def targetIP = sh(
                        script: 'grep -oE "([0-9]{1,3}\\.){3}[0-9]{1,3}" ansible/inventory/host.ini | head -1',
                        returnStdout: true
                    ).trim()
                    
                    echo "Target server IP: ${targetIP}"
                    
                    // Test Flask app
                    if (params.APP_TYPE == 'flask' || params.APP_TYPE == 'both') {
                        sh """
                            echo "Testing Flask app on ${targetIP}:5000..."
                            for i in {1..10}; do
                                if curl -f -s --connect-timeout 10 http://${targetIP}:5000 > /dev/null; then
                                    echo "‚úÖ Flask app is RUNNING"
                                    echo "Response preview:"
                                    curl -s http://${targetIP}:5000 | head -5
                                    break
                                else
                                    echo "‚è≥ Attempt \$i: Flask app not ready..."
                                    sleep 10
                                fi
                            done
                        """
                    }
                    
                    // Test Node.js app
                    if (params.APP_TYPE == 'node' || params.APP_TYPE == 'both') {
                        sh """
                            echo "Testing Node.js app on ${targetIP}:3000..."
                            for i in {1..10}; do
                                if curl -f -s --connect-timeout 10 http://${targetIP}:3000 > /dev/null; then
                                    echo "‚úÖ Node.js app is RUNNING"
                                    echo "Response preview:"
                                    curl -s http://${targetIP}:3000 | head -5
                                    break
                                else
                                    echo "‚è≥ Attempt \$i: Node.js app not ready..."
                                    sleep 10
                                fi
                            done
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "üèÅ Pipeline execution completed"
            script {
                // Archive artifacts
                archiveArtifacts artifacts: 'artifacts/*.tar.gz,report.txt', fingerprint: true
                
                // Create report
                sh """
                    echo "=== DEPLOYMENT REPORT ===" > report.txt
                    echo "Timestamp: \$(date)" >> report.txt
                    echo "Status: ${currentBuild.result ?: 'SUCCESS'}" >> report.txt
                    echo "Agent: \$(hostname)" >> report.txt
                    echo "Applications: ${params.APP_TYPE}" >> report.txt
                    echo "Flask Version: ${params.FLASK_VERSION}" >> report.txt
                    echo "Node Version: ${params.NODE_VERSION}" >> report.txt
                """
            }
        }
        
        success {
            echo "üéâ Deployment completed successfully!"
        }
        
        failure {
            echo "‚ùå Deployment failed!"
            sh '''
                echo "=== TROUBLESHOOTING ==="
                echo "1. Check if ubuntu-agent is online and connected"
                echo "2. Verify Ansible is installed on the agent"
                echo "3. Check SSH connectivity from agent to target server"
                echo "4. Review Ansible playbook syntax"
            '''
        }
    }
}